{"version":3,"sources":["components/CordsTable/TableEntry/TableEntry.js","components/CordsTable/CordsTable.js","components/MapMarkers/MapMarkers.js","App.js","serviceWorker.js","index.js"],"names":["TableEntry","props","scope","className","longitude","latitude","onClick","removeMarker","CordsTable","data","map","el","key","id","bind","MapMarkers","dragMarkerHandler","markerId","event","lngLat","dragMarker","offsetLeft","offsetTop","draggable","onDragEnd","App","useState","collapses","setCollapses","zoom","viewport","setViewport","markers","setMarkers","changeCollapse","collapse","includes","filter","prop","aria-multiselectable","role","Card","CardHeader","aria-expanded","data-parent","href","e","preventDefault","Collapse","isOpen","CardBody","width","height","mapboxApiAccessToken","mapStyle","onViewportChange","eventData","timeStamp","lng","lat","innerPos","findIndex","newMarkers","aria-controls","updatedMarkers","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1079581d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst TableEntry = props => {\r\n\r\n    return (\r\n        <tr>\r\n            <th scope=\"row\"><i className=\"now-ui-icons location_map-big\"></i></th>\r\n            <td>{props.longitude}</td>\r\n            <td>{props.latitude}</td>\r\n            <td><i className=\"now-ui-icons ui-1_simple-remove\" onClick={props.removeMarker}></i></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default TableEntry;","import React from 'react';\r\n\r\nimport TableEntry from './TableEntry/TableEntry';\r\n\r\n\r\nconst CordsTable = props => {\r\n\r\n    return (\r\n        <table className=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th>#</th>\r\n                    <th>Długość</th>\r\n                    <th>Szerokość</th>\r\n                    <th>Usuń</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {props.data.map(el => <TableEntry key={el.id} latitude={el.latitude} longitude={el.longitude} removeMarker={props.removeMarker.bind(this,el.id)}/>)}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default CordsTable;","import React from 'react';\r\nimport { Marker } from 'react-map-gl';\r\n\r\nconst MapMarkers = props => {\r\n\r\n    const dragMarkerHandler = (markerId, event) => {\r\n        const [longitude, latitude] = event.lngLat;\r\n        props.dragMarker(markerId, longitude, latitude);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {props.data.map(el => {\r\n                return (\r\n                    <Marker\r\n                        key={el.id}\r\n                        longitude={el.longitude}\r\n                        latitude={el.latitude}\r\n                        offsetLeft={-10}\r\n                        offsetTop={-10}\r\n                        draggable={true}\r\n                        onDragEnd={dragMarkerHandler.bind(this, el.id)}\r\n                    >\r\n                        <i className=\"now-ui-icons location_pin\"></i>\r\n                    </Marker>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MapMarkers;","import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nimport { Card, CardHeader, CardBody, Collapse } from 'reactstrap';\r\nimport ReactMapGL from 'react-map-gl';\r\n\r\nimport CordsTable from './components/CordsTable/CordsTable';\r\nimport MapMarkers from './components/MapMarkers/MapMarkers';\r\n\r\nconst mapAccessToken = \"pk.eyJ1Ijoic3BlYXJlayIsImEiOiJjazhsdmhzMWswNmc5M21vMjhrZXpxMmwzIn0.0ZcL6pbb5Wk1h7PL4KvrFw\";\r\n\r\nfunction App() {\r\n\r\n  const [collapses, setCollapses] = useState([]);\r\n  const [viewport, setViewport] = useState({\r\n    latitude: 52.0628,\r\n    longitude: 19.7923,\r\n    zoom: 5.10\r\n  })\r\n  const [markers, setMarkers] = useState([]);\r\n\r\n  const mapClickHandler = (eventData) => {\r\n    const id = eventData.timeStamp;\r\n    const [longitude, latitude] = eventData.lngLat;\r\n    setMarkers(markers => [...markers, { longitude, latitude, id }]);\r\n  }\r\n\r\n  const removeMarkerHandler = (markerId) => {\r\n    const updatedMarkers = markers.filter(el => el.id !== markerId);\r\n    setMarkers(updatedMarkers);\r\n  }\r\n\r\n  const dragMarkerHandler = (id, lng, lat) => {\r\n    const innerPos = markers.findIndex((el) => el.id === id);\r\n    const newMarkers = [...markers];\r\n    newMarkers[innerPos] = {\r\n      id: id,\r\n      longitude: lng,\r\n      latitude: lat\r\n    }\r\n    setMarkers(newMarkers);\r\n  }\r\n\r\n  const changeCollapse = collapse => {\r\n    if (collapses.includes(collapse)) {\r\n      setCollapses(collapses.filter(prop => prop !== collapse));\r\n    } else {\r\n      setCollapses([...collapses, collapse]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div id=\"acordeon\">\r\n        <div aria-multiselectable={true} id=\"accordion\" role=\"tablist\">\r\n          <Card className=\"no-transition\">\r\n            <CardHeader className=\"card-collapse\" id=\"headingOne\" role=\"tab\">\r\n              <h5 className=\"mb-0 panel-title\">\r\n                <a\r\n                  aria-expanded={collapses.includes(1)}\r\n                  className=\"collapsed\"\r\n                  data-parent=\"#accordion\"\r\n                  href=\"#pablo\"\r\n                  id=\"collapseOne\"\r\n                  onClick={e => {\r\n                    e.preventDefault();\r\n                    changeCollapse(1);\r\n                  }}\r\n                >\r\n                  Mapa\r\n                </a>\r\n              </h5>\r\n            </CardHeader>\r\n            <Collapse isOpen={collapses.includes(1)}>\r\n              <CardBody>\r\n\r\n                <ReactMapGL\r\n                  {...viewport}\r\n                  width=\"70vw\"\r\n                  height=\"60vh\"\r\n                  mapboxApiAccessToken={mapAccessToken}\r\n                  mapStyle={\"mapbox://styles/spearek/ck8lxcwd913fv1inxw2wl5ia8\"}\r\n                  onViewportChange={setViewport}\r\n                  onClick={mapClickHandler}>\r\n                  <MapMarkers data={markers} dragMarker={dragMarkerHandler} />\r\n                </ReactMapGL>\r\n                \r\n              </CardBody>\r\n            </Collapse>\r\n            <CardHeader className=\"card-collapse\" id=\"headingTwo\" role=\"tab\">\r\n              <h5 className=\"mb-0 panel-title\">\r\n                <a\r\n                  aria-controls=\"collapseTwo\"\r\n                  aria-expanded={collapses.includes(2)}\r\n                  className=\"collapsed\"\r\n                  data-parent=\"#accordion\"\r\n                  href=\"#pablo\"\r\n                  id=\"collapseTwo\"\r\n                  onClick={e => {\r\n                    e.preventDefault();\r\n                    changeCollapse(2);\r\n                  }}\r\n                >\r\n                  Dodane miejsca\r\n                </a>\r\n              </h5>\r\n            </CardHeader>\r\n            <Collapse isOpen={collapses.includes(2)}>\r\n              <CardBody>\r\n                <CordsTable\r\n                  data={markers}\r\n                  removeMarker={removeMarkerHandler} />\r\n              </CardBody>\r\n            </Collapse>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './assets/css/bootstrap.min.css';\r\nimport './assets/css/now-ui-kit.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}